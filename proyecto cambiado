
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

//Producto en Local
struct ProLocal {
    string nombre;
    string tipo;
    float precio;
};

//Producto a Domicilio
struct ProDomicilio {
    string nombre;
    int dui;
    string direccion;
    string tipo;
    float precio_unitario;
};

//Producto en Envio
struct ProEnvio {
    string nombre;
    int dui;
    string pais;
    string tipo;
    float precio_producto;
};

//Definiendo estructura Cliente en Local
struct ClienteLocal {
    string nombre;
    int dui;
    vector<ProLocal> productos;
};


//Definiendo estructura Cliente a Domicilio
struct ClienteDomicilio {
    string nombre;
    int dui;
    string direccion;
    vector<ProDomicilio> productos2;
};

//Definiendo estructura Cliente por Envio
struct ClienteEnvio {
    string nombre;
    int dui;
    string pais;
    vector<ProEnvio> productos3;
};

//Función para borrar un producto por su nombre
void borrarPorNombre(vector<ProLocal> *listaProductos, string name) {
    //Bandera booleana para verificar si se ha encontrado el producto
    bool encontrado = false;

    //Verificación de que la lista de productos esté vacía o no
    if(listaProductos->empty()) {
        cout << "No hay productos en la lista" << endl;
        return;
    }else {
        //Recorrer la lista por medio de un for
        for (int pos = 0; pos < listaProductos->size(); pos++) {
            //Verificar nombre y el string recibido como parámetro
            if(listaProductos->at(pos).nombre == name) {
                //Se modifica la bandera encontrado a verdadero
                encontrado = true;

                //Se manda a llamar la función borrar, desde el primer elemento existente hasta el actual
                listaProductos->erase(listaProductos->begin()+pos);

                cout << "Se borró el producto correctamente" << endl;
                break;
            }
        }

        //Verificando que no exista el producto en la lista
        if(encontrado == false) {
            cout << "No hay producto" << endl;
        }
    }
}

//Función para cobrarle a los clientes en el Local
float cobrar(queue<ClienteLocal> *colaClientes, float pago) {
    //Verificación que haya clientes en la cola
    if(colaClientes->empty()) {
        cout << "No se ha realizado ningún cobro, no hay clientes en cola del local." << endl;
        return 0;
    }else {
        //Recorrer la cola por medio de un while, cuya condición sea que la cola NO esté vacía
        while(!colaClientes->empty()) {
            //Asignar el cliente que se encuentra al frente de la cola a la variable cliente
            Cliente cliente = colaClientes->front();

            cout << "Factura de " << ClienteLocal.nombre << "\t" << "\t" << "DUI: " << ClienteLocal.dui << endl;
            //Recorrer la lista de los productos del cliente actuales con un for
            for(int i = 0; i < ClienteLocal.productos.size(); i++) {
                //Almacenar los valores de precio del producto en la posición i en la variable pago
                pago += ClienteLocal.productos.at(i).precio;

                cout << ClienteLocal.productos.at(i).nombre << ": $" << ClienteLocal.productos.at(i).precio << endl;
            }

            //Eliminar el cliente al frente de la cola 
            colaClientes->pop();
        }
        return pago;
    }
}

//Función para cobrarle a los clientes a Domicilio
float cobrar2(queue<ClienteDomicilio> *colaClientes2, float pago) {
    //Verificación que haya clientes en la cola
    if(colaClientes2->empty()) {
        cout << "No se ha realizado ningún cobro, no hay clientes" << endl;
        return 0;
    }else {
        //Recorrer la cola por medio de un while, cuya condición sea que la cola NO esté vacía
        while(!colaClientes2->empty()) {
            //Asignar el cliente que se encuentra al frente de la cola a la variable cliente
            ClienteDomicilio cliente2 = colaClientes2->front();

            cout << "Factura de " << cliente2.apellido << "\t" << endl;
            cout << "Dui: " << cliente2.dui << "\t" << endl;
            cout << "Dirección: " << cliente2.direccion << "\t" << endl;
            //Recorrer la lista de los productos del cliente actuales con un for
            for(int i = 0; i < cliente2.productos2.size(); i++) {
                //Almacenar los valores de precio del producto en la posición i en la variable pago
                pago += cliente2.productos2.at(i).precio_unitario;

                cout << cliente2.productos2.at(i).apellido << ": $" << cliente2.productos2.at(i).precio_unitario << endl;
            }

            //Eliminar el cliente al frente de la cola porque ya fue atendido, y avanzar en la cola
            colaClientes2->pop();
        }
        return pago;
    }
}

//Función para cobrarle a los clientes por Envio
float cobrar3(queue<ClienteEnvio> *colaClientes3, float pago) {
    //Verificación que haya clientes en la cola
    if(colaClientes3->empty()) {
        cout << "No se ha realizado ningún cobro, no hay clientes" << endl;
        return 0;
    }else {
        //Recorrer la cola por medio de un while, cuya condición sea que la cola NO esté vacía
        while(!colaClientes3->empty()) {
            //Asignar el cliente que se encuentra al frente de la cola a la variable cliente
            ClienteEnvio cliente3 = colaClientes3->front();

            cout << "Factura de " << cliente3.nombre << "\t" << endl;
            cout << "Dui: " << cliente3.dui << "\t" << endl;
            cout << "País de envio: " << cliente3.pais << "\t" << endl;
            //Recorrer la lista de los productos del cliente actuales con un for
            for(int i = 0; i < cliente3.productos3.size(); i++) {
                //Almacenar los valores de precio del producto en la posición i en la variable pago
                pago += cliente3.productos3.at(i).precio_producto;

                cout << cliente3.productos3.at(i).nombre << ": $" << cliente3.productos3.at(i).precio_producto << endl;
            }

            //Eliminar el cliente al frente de la cola porque ya fue atendido, y avanzar en la cola
            colaClientes3->pop();
        }
        return pago;
    }
}

int main() {
    //Creando e inicializando la cola de clientes Local
    queue<ClienteLocal> colaClientes;

    //Creando e inicializando la cola de clientes a Domicilio
    queue<ClienteDomicilio> colaClientes2;
    
    //Creando e inicializando la cola de clientes por Envio
    queue<ClienteEnvio> colaClientes3;
    
    //Creando bandera booleana para iterar el while
    bool status = true;

    //Creando bandera booleana para iterar el segundo while
    bool status2 = true;

    //Menu por medio de while, verificando variable status por cada iteración
    while(status) {
        //Imprimiendo en consola las opciones del menú
        cout << "********** MENU **********" << endl;
        cout << "1. Atender pedidos" << endl;
        cout << "2. Calcular ganancias por ventas en el Local" << endl;
        cout << "3. Calcular ganancias por ventas a Domicilio" << endl;
        cout << "4. Calcular ganancias por ventas de Envios" << endl;
        cout << "5. Salir del programa" << endl;

        //Creación de variable entera que servirá para ejecutar una opción del menú
        int option;

        //Pidiéndole al usuario que ingrese la opción por medio de consola
        cout << "\n" << "Ingrese la opción del menú que desea ejecutar: ";
        cin >> option;
        cin.ignore();

        //Creación de variable tipo cliente en el Local
        ClienteLocal cliente;
        
        //Creación de variable tipo cliente a Domicilio
        ClienteDomicilio cliente2;
        
         //Creación de variable tipo cliente en Envio
        ClienteEnvio cliente3;

        //Creando e inicializando una nueva lista de productos para compras en Local
        vector<ProductoL> listaProducto;
        
        //Creando e inicializando una nueva lista de productos para Domicilio
        vector<ProductoD> listaProducto2;
        
        //Creando e inicializando una nueva lista de productos para Envio
        vector<ProductoE> listaProducto3;

        //Creando una nueva variable producto en el Local
        ProductoL producto;
        
        //Creando una nueva variable producto a Domicilio
        ProductoD producto2;
        
        //Creando una nueva variable producto de Envios
        ProductoE producto3;

        //Creando variable string para el nombre del producto a borrar
        string nombre;

        //Creación de variable entera para la sumatoria de los precios de los productos
        float totalPagadoLocal = 0;
        float totalPagadoDomicilio = 0;
        float totalPagadoEnvio = 0;

        //Case para verificar la opción ingresada
        switch (option){
            case 1:
                cout << "¿Desea comprar en el Local o a Domicilio o Enviar un producto?" << endl;
                cout << "Para Local ingresar 1" << endl;
                cout << "Para Domicilio ingresar 2" << endl;
                cout << "Para Envio ingresar 3" << endl;
                int option3;

                //Indicando a cuál cola ingresar
                cout << "\n" << "Ingrese la opción del menú que desea ejecutar: ";
                cin >> option3;
                cin.ignore();
                
                if (option3 == 1){    
                //Pidiéndole al usuario que ingrese los datos del clientes
                cout << "Ingrese el nombre del cliente" << endl;
                getline(cin, cliente.nombre);

                cout << "Ingrese el dui del cliente" << endl;
                cin >> cliente.dui;
                } else {
                //Pidiéndole al usuario que ingrese los datos del clientes
                cout << "Ingrese el apellido del cliente" << endl;
                getline(cin, cliente2.apellido);
                }
                
                status2 = true;
                //While ocupado para la inserción o eliminación de productos en la lista del cliente
                while(status2) {
                    //Menú secundario para ingresar productos o eliminar
                    cout << "*** Productos del cliente ***" << endl;
                    cout << "1. Agregar en lista para compras en Local" << endl;
                    cout << "2. Agregar en lista para compras a Domicilio" << endl;
                    cout << "3. Agregar en lista para compras Envio" << endl;
                    cout << "4. Eliminar producto por nombre" << endl;
                    cout << "5. Finalizar listado de productos" << endl;

                    //Declaración de variable para ingresar opción en el segundo menú
                    int option2;

                    //Pidiéndole al usuario que ingrese la opción a ejecutar del menú
                    cout << "Ingrese la opción que desea ejecutar" << endl;
                    cin >> option2;
                    cin.ignore();

                    switch(option2) {
                        case 1:
                            //Caso en el que se ingresa un nuevo producto

                            //Pidiéndole al usuario los datos para un producto
                            cout << "Ingrese el nombre del producto" << endl;
                            getline(cin, producto.nombre);

                            cout << "Ingrese el tipo de producto" << endl;
                            getline(cin, producto.tipo);

                            cout << "Ingrese el precio del producto" << endl;
                            cin >> producto.precio;

                            //Agregando un producto a la lista
                            listaProducto.push_back(producto);
                            break;
                            
                        case 2:
                            //Caso en el que se ingresa un nuevo producto para Domicilio

                            //Pidiéndole al usuario los datos para un producto
                            cout << "Ingrese el nombre del producto" << endl;
                            getline(cin, producto2.nombre);

                            cout << "Ingrese su dirección:" << endl;
                            getline(cin, producto2.direccion);
                            
                            cout << "Ingrese el precio del producto" << endl;
                            cin >> producto2.precio_unitario;

                            //Agregando un producto a la lista
                            listaProducto2.push_back(producto2);
                            break;    
                            
                        case 3:
                            //Caso en el que se ingresa un nuevo producto para Envio

                            //Pidiéndole al usuario los datos para un producto
                            cout << "Ingrese el nombre del producto" << endl;
                            getline(cin, producto3.nombre);

                            cout << "Ingrese el país de destino:" << endl;
                            getline(cin, producto3.pais);
                      
                            cout << "Ingrese el precio del producto" << endl;
                            cin >> producto3.precio_unitario;

                            //Agregando un producto a la lista
                            listaProducto3.push_back(producto3);
                            break;    
                            
                        case 4:
                            //Caso en el que se borra un producto por su nombre

                            //Pidiéndole al usuario el nombre del producto que desea borrar
                            cout << "Ingrese el nombre del producto que desea borrar" << endl;
                            getline(cin, nombre);

                            //Mandar a llamar a la función para borrar por el nombre
                            borrarPorNombre(&listaProducto, nombre);
                            break;
                         
                        case 5:
                            status2 = false;
                            break;
                        default:
                            cout << "Opción no válida" << endl;
                            break;
                    }
                }

                //Agregando la lista de productos al cliente
                cliente.productos = listaProducto;

                //Agregando el cliente a la cola
                colaClientesL.push(cliente);

                //Borrando la lista de productos, para reutilizarla para el siguiente cliente
                listaProducto.clear();
                
                
                //Agregando la lista de productos al cliente
                cliente2.productos2 = listaProducto2;

                //Agregando el cliente a la cola
                colaClientesD.push(cliente2);

                //Borrando la lista de productos, para reutilizarla para el siguiente cliente
                listaProducto2.clear();
                
                //Agregando la lista de productos al cliente
                cliente3.productos3 = listaProducto3;

                //Agregando el cliente a la cola
                colaClientesE.push(cliente3);

                //Borrando la lista de productos, para reutilizarla para el siguiente cliente
                listaProducto3.clear();
                break;
            
            case 2:
                //Caso en el que se le cobra a los clientes que hay en cola

                totalPagadoLocal = cobrar(&colaClientesL, 0);

                cout << "Se ha cobrado un total de $" << totalPagadoLocal << " a los clientes" << endl;
                break;
            case 3:
                //Caso en el que se le cobra a los clientes que hay en cola

                totalPagadoDomicilio = cobrar2(&colaClientesD, 0);

                cout << "Se ha cobrado un total de $" << totalPagadoDomicilio << " a los clientes" << endl;
                break;
            case 4:
                //Caso en el que se le cobra a los clientes que hay en cola

                totalPagadoEnvio = cobrar3(&colaClientesE, 0);

                cout << "Se ha cobrado un total de $" << totalPagadoEnvio << " a los clientes" << endl;
                break;
            case 5:
                status = false;
                cout << "Fin del programa." << endl;
                break;
            default:
                cout << "Opción no válida" << endl;
                break;
        }
    }
    return 0;
}